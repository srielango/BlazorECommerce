@page "/cart"

@using BlazorECommerce.Dtos
@inject ICartService CartService
@inject UserService UserService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h3>Your Cart</h3>

@if(!cartItems.Any())
{
    <MudText Color="Color.Error">Your cart is empty.</MudText>
}
else
{
    <MudTable Items="@cartItems" Hover="true" Dense="true" >
        <HeaderContent>
            <MudTh>Image</MudTh>
            <MudTh>Product</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Total</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudAvatar Image="@context.ImageUrl" Size="Size.Medium" /></MudTd>
            <MudTd DataLabel="Product">@context.ProductName</MudTd>
            <MudTd DataLabel="Price">@($"${@context.Price}")</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
            <MudTd DataLabel="Quantity">@context.TotalPrice</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(() => IncrementQuantity(context.ProductName))" Title="Increase Quantity" />
                <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Primary" OnClick="@(() => DecrementQuantity(context.ProductName))" Title="Decrease Quantity" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveItem(context.ProductName))" Title="Remove from Cart" />
            </MudTd>
        </RowTemplate>
    </MudTable>
    <div class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => CartService.ClearCartAsync())">Clear Cart</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" OnClick="@GoToCheckout">Checkout</MudButton>
    </div>
}


@code {
    private List<CartItemDto> cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItemsAsync();
    }

    private void RemoveItem(string productName)
    {
        CartService.RemoveFromCartAsync(productName);
        RefreshCart();
    }

    private void RefreshCart()
    {
        cartItems = CartService.GetCartItems();
        StateHasChanged();
    }

    private void IncrementQuantity(string productName)
    {
        CartService.IncrementQuantity(productName);
        RefreshCart();
    }
    private void DecrementQuantity(string productName)
    {
        CartService.DecrementQuantity(productName);
        RefreshCart();
    }

    private void GoToCheckout()
    {
        if(!UserService.IsLoggedIn)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            Navigation.NavigateTo("/checkout");
        }
    }
}
