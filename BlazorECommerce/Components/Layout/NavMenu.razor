@inject ICartService CartService
@inject NavigationManager Navigation

@implements IAsyncDisposable
@inject CartState CartState
@inject UserService UserService

@rendermode InteractiveServer

<MudAppBar Elevation="1" Color="Color.Primary">
    <MudText Typo="Typo.h6" Class="ml-2">Blazor E-Commerce</MudText>
    <MudSpacer />
    <MudIconButton Color="Color.Inherit" OnClick="@GoToCart">
        <MudBadge Content="@cartItemCount" Color="Color.Error"
                  Class="mr-2" />
        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
    </MudIconButton>
    @if(UserService.IsLoggedIn)
    {
        <MudText Class="mr-2">Hello, @UserService.CurrentUser!</MudText>
        <MudButton OnClick="@Logout" Color="Color.Secondary" Variant="Variant.Text">Logout</MudButton>
    }
    else
    {
        <MudButton OnClick="@(() => Navigation.NavigateTo("/login"))" Color="Color.Tertiary" Variant="Variant.Text">Login</MudButton>
    }

</MudAppBar>

@code {
    private int cartItemCount = 0;

    protected override void OnInitialized()
    {
        CartState.OnChange += OnCartChanged;
        if(UserService.IsLoggedIn)
        {
            cartItemCount = CartService.GetCartItems().Count;
        }
    }

    private void GoToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private async Task OnCartChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync()
    {
        CartState.OnChange -= OnCartChanged;
        return ValueTask.CompletedTask;
    }

    public async Task Logout()
    {
        await UserService.Logout();
        Navigation.NavigateTo("/");
    }
}
