@using Microsoft.AspNetCore.Components.Authorization
@inject ICartService CartService
@inject NavigationManager Navigation
@inject CartState CartState
@* @inject CustomAuthenticationStateProvider authProvider *@

@implements IAsyncDisposable
@rendermode InteractiveServer

<MudAppBar Elevation="1" Color="Color.Primary">
    <MudText Typo="Typo.h6" Class="ml-2">Blazor E-Commerce</MudText>
    <MudSpacer />
    <MudIconButton Color="Color.Inherit" OnClick="@GoToCart">
        <MudBadge Content="@cartItemCount" Color="Color.Error" Class="mr-2" />
        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
    </MudIconButton>

    <AuthorizeView Context="authState">
        <Authorized>
            <MudText Class="mr-2">Hello, @authState.User.Identity?.Name</MudText>
            <MudButton OnClick="@Logout" Color="Color.Secondary" Variant="Variant.Text">Logout</MudButton>
        </Authorized>
        <NotAuthorized>
            <MudButton OnClick="@(() => Navigation.NavigateTo("/login"))" Color="Color.Tertiary" Variant="Variant.Text">Login</MudButton>
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>

@code {
    private int cartItemCount;

    protected override void OnInitialized()
    {
        CartState.OnChange += OnCartChanged;
        _ = LoadCartCountAsync();
    }

    private async Task LoadCartCountAsync()
    {
        var items = await CartService.GetCartItemsAsync();
        cartItemCount = items.Count;
        await InvokeAsync(StateHasChanged);
    }

    private void GoToCart() => Navigation.NavigateTo("/cart");

    private async Task OnCartChanged()
    {
        await LoadCartCountAsync();
    }

    public ValueTask DisposeAsync()
    {
        CartState.OnChange -= OnCartChanged;
        return ValueTask.CompletedTask;
    }

    private async Task Logout()
    {
        await CartService.ClearCartAsync();
        //await authProvider.MarkUserAsLoggedOut(); // clear auth state
        Navigation.NavigateTo("/");
    }
}
